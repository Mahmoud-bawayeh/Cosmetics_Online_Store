// <auto-generated />
using System;
using CosmeticsOnlineStore_Core.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CosmeticsOnlineStore_Core.Migrations
{
    [DbContext(typeof(CosmeticsOnlineStoreDBContext))]
    [Migration("20240429104457_mam")]
    partial class mam
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CosmeticsOnlineStore_Core.Models.Entity.ContentManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContentID")
                        .HasColumnType("int");

                    b.Property<string>("ContentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContentManagementProduct", (string)null);
                });

            modelBuilder.Entity("CosmeticsOnlineStore_Core.Models.Entity.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 4, 29, 13, 44, 57, 402, DateTimeKind.Local).AddTicks(7506));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("DiscountID")
                        .HasColumnType("int");

                    b.Property<double>("DiscountPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("CosmeticsOnlineStore_Core.Models.Entity.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 4, 29, 13, 44, 57, 402, DateTimeKind.Local).AddTicks(9224));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<float>("DiscountAmount")
                        .HasColumnType("real");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<float>("PromoCode")
                        .HasColumnType("real");

                    b.Property<float>("TaxAmount")
                        .HasColumnType("real");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("Orders", t =>
                        {
                            t.HasCheckConstraint("Ch_Order_TotalAmount", "TotalAmount >= 0");
                        });
                });

            modelBuilder.Entity("CosmeticsOnlineStore_Core.Models.Entity.ProductRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 4, 29, 13, 44, 57, 403, DateTimeKind.Local).AddTicks(166));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FulfillmentStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("ProductRequests");
                });

            modelBuilder.Entity("CosmeticsOnlineStore_Core.Models.Entity.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 4, 29, 13, 44, 57, 403, DateTimeKind.Local).AddTicks(1282));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("OrdersId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrdersId");

                    b.ToTable("Products", t =>
                        {
                            t.HasCheckConstraint("Ch_Product_AvailableQuantity", "AvailableQuantity>=5");

                            t.HasCheckConstraint("Ch_Product_Price", "Price>=0");
                        });
                });

            modelBuilder.Entity("CosmeticsOnlineStore_Core.Models.Entity.SalesReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProductsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 4, 29, 13, 44, 57, 403, DateTimeKind.Local).AddTicks(1834));

                    b.Property<int>("ReportID")
                        .HasColumnType("int");

                    b.Property<double>("TotalOrders")
                        .HasColumnType("float");

                    b.Property<double>("TotalSales")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductsId");

                    b.ToTable("SalesReports", t =>
                        {
                            t.HasCheckConstraint("_salesReport_TotalOrders_CH", "TotalOrders >= 0");
                        });
                });

            modelBuilder.Entity("CosmeticsOnlineStore_Core.Models.Entity.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 4, 29, 13, 44, 57, 403, DateTimeKind.Local).AddTicks(4108));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("NationalNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("TotalSpent")
                        .HasColumnType("float");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NationalNo")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Users", t =>
                        {
                            t.HasCheckConstraint("CH_User_Email", "Email Like '%@gmail.com%' Or Email Like  '%@outlook.com%' or Email Like '%@yahoo.com%'");

                            t.HasCheckConstraint("CH_User_name", "len(LastName)>5");

                            t.HasCheckConstraint("Ch_User_password", "LEN(password) >= 8 AND LEN(password) <= 16");

                            t.HasCheckConstraint("Ch_User_phone", "(len([Phone])=(10) AND ([Phone] like '079%' OR [Phone] like '078%' OR [Phone] like '077%'))");
                        });
                });

            modelBuilder.Entity("CosmeticsOnlineStore_Core.Models.Entity.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 4, 29, 13, 44, 57, 403, DateTimeKind.Local).AddTicks(4811));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.Property<int>("WishlistID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("CosmeticsOnlineStore_Core.Models.Entity_Configration.ContentManagementProductss", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContentManagementId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContentManagementId");

                    b.HasIndex("ProductId");

                    b.ToTable("ContentManagementProductss");
                });

            modelBuilder.Entity("CosmeticsOnlineStore_Core.Models.Entity.Discount", b =>
                {
                    b.HasOne("CosmeticsOnlineStore_Core.Models.Entity.Users", "Users")
                        .WithMany("Discounts")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CosmeticsOnlineStore_Core.Models.Entity.Orders", b =>
                {
                    b.HasOne("CosmeticsOnlineStore_Core.Models.Entity.Users", "Users")
                        .WithMany("Orders")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CosmeticsOnlineStore_Core.Models.Entity.ProductRequest", b =>
                {
                    b.HasOne("CosmeticsOnlineStore_Core.Models.Entity.Users", "Users")
                        .WithMany("ProductRequests")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CosmeticsOnlineStore_Core.Models.Entity.Products", b =>
                {
                    b.HasOne("CosmeticsOnlineStore_Core.Models.Entity.Orders", "Orders")
                        .WithMany("Products")
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CosmeticsOnlineStore_Core.Models.Entity.SalesReport", b =>
                {
                    b.HasOne("CosmeticsOnlineStore_Core.Models.Entity.Products", null)
                        .WithMany("SalesReports")
                        .HasForeignKey("ProductsId");
                });

            modelBuilder.Entity("CosmeticsOnlineStore_Core.Models.Entity.Wishlist", b =>
                {
                    b.HasOne("CosmeticsOnlineStore_Core.Models.Entity.Users", "Users")
                        .WithMany("Wishlists")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CosmeticsOnlineStore_Core.Models.Entity_Configration.ContentManagementProductss", b =>
                {
                    b.HasOne("CosmeticsOnlineStore_Core.Models.Entity.ContentManagement", "ContentManagement")
                        .WithMany("ContentManagementProducts")
                        .HasForeignKey("ContentManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CosmeticsOnlineStore_Core.Models.Entity.Products", "Products")
                        .WithMany("ContentManagementProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentManagement");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("CosmeticsOnlineStore_Core.Models.Entity.ContentManagement", b =>
                {
                    b.Navigation("ContentManagementProducts");
                });

            modelBuilder.Entity("CosmeticsOnlineStore_Core.Models.Entity.Orders", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CosmeticsOnlineStore_Core.Models.Entity.Products", b =>
                {
                    b.Navigation("ContentManagementProducts");

                    b.Navigation("SalesReports");
                });

            modelBuilder.Entity("CosmeticsOnlineStore_Core.Models.Entity.Users", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("Orders");

                    b.Navigation("ProductRequests");

                    b.Navigation("Wishlists");
                });
#pragma warning restore 612, 618
        }
    }
}
